#include <iostream>
#include <sstream>
#include <cstring>
#include <fstream>
#include <string>
#include <vector>
#include <map>

using namespace std;

#define NUM 300


map<int,long long> M;


int main()
{
	ofstream fout("A-large.out");
	ifstream fin("A-large.in");
	
	//NB: see other source file for precomputation of following values
	
	M[4] = 2;
M[8] = 3;
M[12] = 3;
M[16] = 2;
M[20] = 2;
M[24] = 3;
M[28] = 3;
M[32] = 5;
M[36] = 5;
M[40] = 23;
M[44] = 23;
M[48] = 5;
M[52] = 5;
M[56] = 23;
M[60] = 23;
M[64] = 6;
M[68] = 6;
M[72] = 79;
M[76] = 79;
M[80] = 6;
M[84] = 6;
M[88] = 79;
M[92] = 79;
M[96] = 49;
M[100] = 49;
M[104] = 79;
M[108] = 79;
M[112] = 49;
M[116] = 49;
M[120] = 79;
M[124] = 79;
M[128] = 7;
M[132] = 7;
M[136] = 143;
M[140] = 143;
M[144] = 7;
M[148] = 7;
M[152] = 143;
M[156] = 143;
M[160] = 7;
M[164] = 7;
M[168] = 143;
M[172] = 143;
M[176] = 7;
M[180] = 7;
M[184] = 143;
M[188] = 143;
M[192] = 49;
M[196] = 49;
M[200] = 2207;
M[204] = 2207;
M[208] = 49;
M[212] = 49;
M[216] = 2207;
M[220] = 2207;
M[224] = 49;
M[228] = 49;
M[232] = 2207;
M[236] = 2207;
M[240] = 49;
M[244] = 49;
M[248] = 2207;
M[252] = 2207;
M[256] = 8;
M[260] = 8;
M[264] = 27;
M[268] = 27;
M[272] = 8;
M[276] = 8;
M[280] = 27;
M[284] = 27;
M[288] = 27;
M[292] = 27;
M[296] = 27;
M[300] = 27;
M[304] = 27;
M[308] = 27;
M[312] = 27;
M[316] = 27;
M[320] = 216;
M[324] = 216;
M[328] = 3879;
M[332] = 3879;
M[336] = 216;
M[340] = 216;
M[344] = 3879;
M[348] = 3879;
M[352] = 1975;
M[356] = 1975;
M[360] = 3879;
M[364] = 3879;
M[368] = 1975;
M[372] = 1975;
M[376] = 3879;
M[380] = 3879;
M[384] = 1001;
M[388] = 1001;
M[392] = 5719;
M[396] = 5719;
M[400] = 1001;
M[404] = 1001;
M[408] = 5719;
M[412] = 5719;
M[416] = 1001;
M[420] = 1001;
M[424] = 5719;
M[428] = 5719;
M[432] = 1001;
M[436] = 1001;
M[440] = 5719;
M[444] = 5719;
M[448] = 47089;
M[452] = 47089;
M[456] = 47089;
M[460] = 47089;
M[464] = 47089;
M[468] = 47089;
M[472] = 47089;
M[476] = 47089;
M[480] = 48769;
M[484] = 48769;
M[488] = 58775;
M[492] = 58775;
M[496] = 48769;
M[500] = 48769;
M[504] = 58775;
M[508] = 58775;
M[512] = 3;
M[516] = 3;
M[520] = 3;
M[524] = 3;
M[528] = 3;
M[532] = 3;
M[536] = 3;
M[540] = 3;
M[544] = 27;
M[548] = 27;
M[552] = 27;
M[556] = 27;
M[560] = 27;
M[564] = 27;
M[568] = 27;
M[572] = 27;
M[576] = 415;
M[580] = 415;
M[584] = 707;
M[588] = 707;
M[592] = 415;
M[596] = 415;
M[600] = 707;
M[604] = 707;
M[608] = 415;
M[612] = 415;
M[616] = 1695;
M[620] = 1695;
M[624] = 415;
M[628] = 415;
M[632] = 1695;
M[636] = 1695;
M[640] = 125;
M[644] = 125;
M[648] = 143;
M[652] = 143;
M[656] = 125;
M[660] = 125;
M[664] = 143;
M[668] = 143;
M[672] = 125;
M[676] = 125;
M[680] = 143;
M[684] = 143;
M[688] = 125;
M[692] = 125;
M[696] = 143;
M[700] = 143;
M[704] = 2753;
M[708] = 2753;
M[712] = 37131;
M[716] = 37131;
M[720] = 2753;
M[724] = 2753;
M[728] = 37131;
M[732] = 37131;
M[736] = 37131;
M[740] = 37131;
M[744] = 37131;
M[748] = 37131;
M[752] = 37131;
M[756] = 37131;
M[760] = 37131;
M[764] = 37131;
M[768] = 27;
M[772] = 27;
M[776] = 27;
M[780] = 27;
M[784] = 27;
M[788] = 27;
M[792] = 27;
M[796] = 27;
M[800] = 27;
M[804] = 27;
M[808] = 27;
M[812] = 27;
M[816] = 27;
M[820] = 27;
M[824] = 27;
M[828] = 27;
M[832] = 4977;
M[836] = 4977;
M[840] = 10089;
M[844] = 10089;
M[848] = 4977;
M[852] = 4977;
M[856] = 10089;
M[860] = 10089;
M[864] = 4977;
M[868] = 4977;
M[872] = 23117;
M[876] = 23117;
M[880] = 4977;
M[884] = 4977;
M[888] = 23117;
M[892] = 23117;
M[896] = 6393;
M[900] = 6393;
M[904] = 35785;
M[908] = 35785;
M[912] = 6393;
M[916] = 6393;
M[920] = 35785;
M[924] = 35785;
M[928] = 6393;
M[932] = 6393;
M[936] = 128821;
M[940] = 128821;
M[944] = 6393;
M[948] = 6393;
M[952] = 128821;
M[956] = 128821;
M[960] = 569669;
M[964] = 569669;
M[968] = 569669;
M[972] = 569669;
M[976] = 569669;
M[980] = 569669;
M[984] = 569669;
M[988] = 569669;
M[992] = 569669;
M[996] = 569669;
M[1000] = 569669;
M[1004] = 569669;
M[1008] = 569669;
M[1012] = 569669;
M[1016] = 569669;
M[1020] = 569669;
M[1024] = 7;
M[1028] = 7;
M[1032] = 13;
M[1036] = 13;
M[1040] = 7;
M[1044] = 7;
M[1048] = 13;
M[1052] = 13;
M[1056] = 7;
M[1060] = 7;
M[1064] = 23;
M[1068] = 23;
M[1072] = 7;
M[1076] = 7;
M[1080] = 23;
M[1084] = 23;
M[1088] = 44;
M[1092] = 44;
M[1096] = 79;
M[1100] = 79;
M[1104] = 44;
M[1108] = 44;
M[1112] = 79;
M[1116] = 79;
M[1120] = 49;
M[1124] = 49;
M[1128] = 79;
M[1132] = 79;
M[1136] = 49;
M[1140] = 49;
M[1144] = 79;
M[1148] = 79;
M[1152] = 7;
M[1156] = 7;
M[1160] = 167;
M[1164] = 167;
M[1168] = 7;
M[1172] = 7;
M[1176] = 167;
M[1180] = 167;
M[1184] = 7;
M[1188] = 7;
M[1192] = 7895;
M[1196] = 7895;
M[1200] = 7;
M[1204] = 7;
M[1208] = 7895;
M[1212] = 7895;
M[1216] = 49;
M[1220] = 49;
M[1224] = 6307;
M[1228] = 6307;
M[1232] = 49;
M[1236] = 49;
M[1240] = 6307;
M[1244] = 6307;
M[1248] = 49;
M[1252] = 49;
M[1256] = 7895;
M[1260] = 7895;
M[1264] = 49;
M[1268] = 49;
M[1272] = 7895;
M[1276] = 7895;
M[1280] = 97;
M[1284] = 97;
M[1288] = 219;
M[1292] = 219;
M[1296] = 97;
M[1300] = 97;
M[1304] = 219;
M[1308] = 219;
M[1312] = 219;
M[1316] = 219;
M[1320] = 219;
M[1324] = 219;
M[1328] = 219;
M[1332] = 219;
M[1336] = 219;
M[1340] = 219;
M[1344] = 608;
M[1348] = 608;
M[1352] = 3879;
M[1356] = 3879;
M[1360] = 608;
M[1364] = 608;
M[1368] = 3879;
M[1372] = 3879;
M[1376] = 3879;
M[1380] = 3879;
M[1384] = 3879;
M[1388] = 3879;
M[1392] = 3879;
M[1396] = 3879;
M[1400] = 3879;
M[1404] = 3879;
M[1408] = 34527;
M[1412] = 34527;
M[1416] = 48041;
M[1420] = 48041;
M[1424] = 34527;
M[1428] = 34527;
M[1432] = 48041;
M[1436] = 48041;
M[1440] = 34527;
M[1444] = 34527;
M[1448] = 120407;
M[1452] = 120407;
M[1456] = 34527;
M[1460] = 34527;
M[1464] = 120407;
M[1468] = 120407;
M[1472] = 245035;
M[1476] = 245035;
M[1480] = 697563;
M[1484] = 697563;
M[1488] = 245035;
M[1492] = 245035;
M[1496] = 697563;
M[1500] = 697563;
M[1504] = 245035;
M[1508] = 245035;
M[1512] = 2688153;
M[1516] = 2688153;
M[1520] = 245035;
M[1524] = 245035;
M[1528] = 2688153;
M[1532] = 2688153;
M[1536] = 91;
M[1540] = 91;
M[1544] = 91;
M[1548] = 91;
M[1552] = 91;
M[1556] = 91;
M[1560] = 91;
M[1564] = 91;
M[1568] = 91;
M[1572] = 91;
M[1576] = 91;
M[1580] = 91;
M[1584] = 91;
M[1588] = 91;
M[1592] = 91;
M[1596] = 91;
M[1600] = 1033;
M[1604] = 1033;
M[1608] = 6073;
M[1612] = 6073;
M[1616] = 1033;
M[1620] = 1033;
M[1624] = 6073;
M[1628] = 6073;
M[1632] = 4577;
M[1636] = 4577;
M[1640] = 6073;
M[1644] = 6073;
M[1648] = 4577;
M[1652] = 4577;
M[1656] = 6073;
M[1660] = 6073;
M[1664] = 1337;
M[1668] = 1337;
M[1672] = 1337;
M[1676] = 1337;
M[1680] = 1337;
M[1684] = 1337;
M[1688] = 1337;
M[1692] = 1337;
M[1696] = 29913;
M[1700] = 29913;
M[1704] = 120149;
M[1708] = 120149;
M[1712] = 29913;
M[1716] = 29913;
M[1720] = 120149;
M[1724] = 120149;
M[1728] = 71735;
M[1732] = 71735;
M[1736] = 613479;
M[1740] = 613479;
M[1744] = 71735;
M[1748] = 71735;
M[1752] = 613479;
M[1756] = 613479;
M[1760] = 218301;
M[1764] = 218301;
M[1768] = 711725;
M[1772] = 711725;
M[1776] = 218301;
M[1780] = 218301;
M[1784] = 711725;
M[1788] = 711725;
M[1792] = 1177;
M[1796] = 1177;
M[1800] = 1177;
M[1804] = 1177;
M[1808] = 1177;
M[1812] = 1177;
M[1816] = 1177;
M[1820] = 1177;
M[1824] = 1177;
M[1828] = 1177;
M[1832] = 1177;
M[1836] = 1177;
M[1840] = 1177;
M[1844] = 1177;
M[1848] = 1177;
M[1852] = 1177;
M[1856] = 9867;
M[1860] = 9867;
M[1864] = 28099;
M[1868] = 28099;
M[1872] = 9867;
M[1876] = 9867;
M[1880] = 28099;
M[1884] = 28099;
M[1888] = 28099;
M[1892] = 28099;
M[1896] = 28099;
M[1900] = 28099;
M[1904] = 28099;
M[1908] = 28099;
M[1912] = 28099;
M[1916] = 28099;
M[1920] = 48041;
M[1924] = 48041;
M[1928] = 48041;
M[1932] = 48041;
M[1936] = 48041;
M[1940] = 48041;
M[1944] = 48041;
M[1948] = 48041;
M[1952] = 246297;
M[1956] = 246297;
M[1960] = 346719;
M[1964] = 346719;
M[1968] = 246297;
M[1972] = 246297;
M[1976] = 346719;
M[1980] = 346719;
M[1984] = 2662657;
M[1988] = 2662657;
M[1992] = 4817803;
M[1996] = 4817803;
M[2000] = 2662657;
M[2004] = 2662657;
M[2008] = 4817803;
M[2012] = 4817803;
M[2016] = 11814485;
M[2020] = 11814485;
M[2024] = 11814485;
M[2028] = 11814485;
M[2032] = 11814485;
M[2036] = 11814485;
M[2040] = 11814485;
	
	string s;
	getline(fin,s);
	int T = atoi(s.c_str());	
	
	for(int tt = 0; tt < T; tt++)
	{
		cout << tt << endl;
		fout << "Case #" << tt+1 << ": ";
		getline(fin,s);
		
		stringstream in(s);
		vector<int> num;
		int tmp;
		while(in >> tmp)
			num.push_back(tmp);
		
		int mask = 0;
		for(int t = 0; t < num.size(); t++)
			mask += (1<<num[t]);
		fout << M[mask] << endl;
	}

	return 0;
}
		
