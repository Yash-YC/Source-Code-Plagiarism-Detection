#include <cstdio>
#include <vector>
#include <list>

using namespace std;
int main(){
  int T;
  scanf("%d\n",&T);
  int result[512];
//output from zadgen
result[1]=2;
result[2]=3;
result[3]=3;
result[4]=2;
result[5]=2;
result[6]=3;
result[7]=3;
result[8]=5;
result[9]=5;
result[10]=23;
result[11]=23;
result[12]=5;
result[13]=5;
result[14]=23;
result[15]=23;
result[16]=6;
result[17]=6;
result[18]=79;
result[19]=79;
result[20]=6;
result[21]=6;
result[22]=79;
result[23]=79;
result[24]=49;
result[25]=49;
result[26]=79;
result[27]=79;
result[28]=49;
result[29]=49;
result[30]=79;
result[31]=79;
result[32]=7;
result[33]=7;
result[34]=143;
result[35]=143;
result[36]=7;
result[37]=7;
result[38]=143;
result[39]=143;
result[40]=7;
result[41]=7;
result[42]=143;
result[43]=143;
result[44]=7;
result[45]=7;
result[46]=143;
result[47]=143;
result[48]=49;
result[49]=49;
result[50]=2207;
result[51]=2207;
result[52]=49;
result[53]=49;
result[54]=2207;
result[55]=2207;
result[56]=49;
result[57]=49;
result[58]=2207;
result[59]=2207;
result[60]=49;
result[61]=49;
result[62]=2207;
result[63]=2207;
result[64]=8;
result[65]=8;
result[66]=27;
result[67]=27;
result[68]=8;
result[69]=8;
result[70]=27;
result[71]=27;
result[72]=27;
result[73]=27;
result[74]=27;
result[75]=27;
result[76]=27;
result[77]=27;
result[78]=27;
result[79]=27;
result[80]=216;
result[81]=216;
result[82]=3879;
result[83]=3879;
result[84]=216;
result[85]=216;
result[86]=3879;
result[87]=3879;
result[88]=1975;
result[89]=1975;
result[90]=3879;
result[91]=3879;
result[92]=1975;
result[93]=1975;
result[94]=3879;
result[95]=3879;
result[96]=1001;
result[97]=1001;
result[98]=5719;
result[99]=5719;
result[100]=1001;
result[101]=1001;
result[102]=5719;
result[103]=5719;
result[104]=1001;
result[105]=1001;
result[106]=5719;
result[107]=5719;
result[108]=1001;
result[109]=1001;
result[110]=5719;
result[111]=5719;
result[112]=47089;
result[113]=47089;
result[114]=47089;
result[115]=47089;
result[116]=47089;
result[117]=47089;
result[118]=47089;
result[119]=47089;
result[120]=48769;
result[121]=48769;
result[122]=58775;
result[123]=58775;
result[124]=48769;
result[125]=48769;
result[126]=58775;
result[127]=58775;
result[128]=3;
result[129]=3;
result[130]=3;
result[131]=3;
result[132]=3;
result[133]=3;
result[134]=3;
result[135]=3;
result[136]=27;
result[137]=27;
result[138]=27;
result[139]=27;
result[140]=27;
result[141]=27;
result[142]=27;
result[143]=27;
result[144]=415;
result[145]=415;
result[146]=707;
result[147]=707;
result[148]=415;
result[149]=415;
result[150]=707;
result[151]=707;
result[152]=415;
result[153]=415;
result[154]=1695;
result[155]=1695;
result[156]=415;
result[157]=415;
result[158]=1695;
result[159]=1695;
result[160]=125;
result[161]=125;
result[162]=143;
result[163]=143;
result[164]=125;
result[165]=125;
result[166]=143;
result[167]=143;
result[168]=125;
result[169]=125;
result[170]=143;
result[171]=143;
result[172]=125;
result[173]=125;
result[174]=143;
result[175]=143;
result[176]=2753;
result[177]=2753;
result[178]=37131;
result[179]=37131;
result[180]=2753;
result[181]=2753;
result[182]=37131;
result[183]=37131;
result[184]=37131;
result[185]=37131;
result[186]=37131;
result[187]=37131;
result[188]=37131;
result[189]=37131;
result[190]=37131;
result[191]=37131;
result[192]=27;
result[193]=27;
result[194]=27;
result[195]=27;
result[196]=27;
result[197]=27;
result[198]=27;
result[199]=27;
result[200]=27;
result[201]=27;
result[202]=27;
result[203]=27;
result[204]=27;
result[205]=27;
result[206]=27;
result[207]=27;
result[208]=4977;
result[209]=4977;
result[210]=10089;
result[211]=10089;
result[212]=4977;
result[213]=4977;
result[214]=10089;
result[215]=10089;
result[216]=4977;
result[217]=4977;
result[218]=23117;
result[219]=23117;
result[220]=4977;
result[221]=4977;
result[222]=23117;
result[223]=23117;
result[224]=6393;
result[225]=6393;
result[226]=35785;
result[227]=35785;
result[228]=6393;
result[229]=6393;
result[230]=35785;
result[231]=35785;
result[232]=6393;
result[233]=6393;
result[234]=128821;
result[235]=128821;
result[236]=6393;
result[237]=6393;
result[238]=128821;
result[239]=128821;
result[240]=569669;
result[241]=569669;
result[242]=569669;
result[243]=569669;
result[244]=569669;
result[245]=569669;
result[246]=569669;
result[247]=569669;
result[248]=569669;
result[249]=569669;
result[250]=569669;
result[251]=569669;
result[252]=569669;
result[253]=569669;
result[254]=569669;
result[255]=569669;
result[256]=7;
result[257]=7;
result[258]=13;
result[259]=13;
result[260]=7;
result[261]=7;
result[262]=13;
result[263]=13;
result[264]=7;
result[265]=7;
result[266]=23;
result[267]=23;
result[268]=7;
result[269]=7;
result[270]=23;
result[271]=23;
result[272]=44;
result[273]=44;
result[274]=79;
result[275]=79;
result[276]=44;
result[277]=44;
result[278]=79;
result[279]=79;
result[280]=49;
result[281]=49;
result[282]=79;
result[283]=79;
result[284]=49;
result[285]=49;
result[286]=79;
result[287]=79;
result[288]=7;
result[289]=7;
result[290]=167;
result[291]=167;
result[292]=7;
result[293]=7;
result[294]=167;
result[295]=167;
result[296]=7;
result[297]=7;
result[298]=7895;
result[299]=7895;
result[300]=7;
result[301]=7;
result[302]=7895;
result[303]=7895;
result[304]=49;
result[305]=49;
result[306]=6307;
result[307]=6307;
result[308]=49;
result[309]=49;
result[310]=6307;
result[311]=6307;
result[312]=49;
result[313]=49;
result[314]=7895;
result[315]=7895;
result[316]=49;
result[317]=49;
result[318]=7895;
result[319]=7895;
result[320]=97;
result[321]=97;
result[322]=219;
result[323]=219;
result[324]=97;
result[325]=97;
result[326]=219;
result[327]=219;
result[328]=219;
result[329]=219;
result[330]=219;
result[331]=219;
result[332]=219;
result[333]=219;
result[334]=219;
result[335]=219;
result[336]=608;
result[337]=608;
result[338]=3879;
result[339]=3879;
result[340]=608;
result[341]=608;
result[342]=3879;
result[343]=3879;
result[344]=3879;
result[345]=3879;
result[346]=3879;
result[347]=3879;
result[348]=3879;
result[349]=3879;
result[350]=3879;
result[351]=3879;
result[352]=34527;
result[353]=34527;
result[354]=48041;
result[355]=48041;
result[356]=34527;
result[357]=34527;
result[358]=48041;
result[359]=48041;
result[360]=34527;
result[361]=34527;
result[362]=120407;
result[363]=120407;
result[364]=34527;
result[365]=34527;
result[366]=120407;
result[367]=120407;
result[368]=245035;
result[369]=245035;
result[370]=697563;
result[371]=697563;
result[372]=245035;
result[373]=245035;
result[374]=697563;
result[375]=697563;
result[376]=245035;
result[377]=245035;
result[378]=2688153;
result[379]=2688153;
result[380]=245035;
result[381]=245035;
result[382]=2688153;
result[383]=2688153;
result[384]=91;
result[385]=91;
result[386]=91;
result[387]=91;
result[388]=91;
result[389]=91;
result[390]=91;
result[391]=91;
result[392]=91;
result[393]=91;
result[394]=91;
result[395]=91;
result[396]=91;
result[397]=91;
result[398]=91;
result[399]=91;
result[400]=1033;
result[401]=1033;
result[402]=6073;
result[403]=6073;
result[404]=1033;
result[405]=1033;
result[406]=6073;
result[407]=6073;
result[408]=4577;
result[409]=4577;
result[410]=6073;
result[411]=6073;
result[412]=4577;
result[413]=4577;
result[414]=6073;
result[415]=6073;
result[416]=1337;
result[417]=1337;
result[418]=1337;
result[419]=1337;
result[420]=1337;
result[421]=1337;
result[422]=1337;
result[423]=1337;
result[424]=29913;
result[425]=29913;
result[426]=120149;
result[427]=120149;
result[428]=29913;
result[429]=29913;
result[430]=120149;
result[431]=120149;
result[432]=71735;
result[433]=71735;
result[434]=613479;
result[435]=613479;
result[436]=71735;
result[437]=71735;
result[438]=613479;
result[439]=613479;
result[440]=218301;
result[441]=218301;
result[442]=711725;
result[443]=711725;
result[444]=218301;
result[445]=218301;
result[446]=711725;
result[447]=711725;
result[448]=1177;
result[449]=1177;
result[450]=1177;
result[451]=1177;
result[452]=1177;
result[453]=1177;
result[454]=1177;
result[455]=1177;
result[456]=1177;
result[457]=1177;
result[458]=1177;
result[459]=1177;
result[460]=1177;
result[461]=1177;
result[462]=1177;
result[463]=1177;
result[464]=9867;
result[465]=9867;
result[466]=28099;
result[467]=28099;
result[468]=9867;
result[469]=9867;
result[470]=28099;
result[471]=28099;
result[472]=28099;
result[473]=28099;
result[474]=28099;
result[475]=28099;
result[476]=28099;
result[477]=28099;
result[478]=28099;
result[479]=28099;
result[480]=48041;
result[481]=48041;
result[482]=48041;
result[483]=48041;
result[484]=48041;
result[485]=48041;
result[486]=48041;
result[487]=48041;
result[488]=246297;
result[489]=246297;
result[490]=346719;
result[491]=346719;
result[492]=246297;
result[493]=246297;
result[494]=346719;
result[495]=346719;
result[496]=2662657;
result[497]=2662657;
result[498]=4817803;
result[499]=4817803;
result[500]=2662657;
result[501]=2662657;
result[502]=4817803;
result[503]=4817803;
result[504]=11814485;
result[505]=11814485;
result[506]=11814485;
result[507]=11814485;
result[508]=11814485;
result[509]=11814485;
result[510]=11814485;
result[511]=11814485;
  for(int caseid=1; caseid<=T; caseid++){
    int caseiden=0;
    while(true){
      int n;
      char c;
      scanf("%d",&n);
      caseiden+=(1<<(n-2));
      scanf("%c",&c);
      if(c=='\r' || c=='\n')
	break;
    }
    printf("Case #%d: %d\n",caseid,result[caseiden]);
  }
}
