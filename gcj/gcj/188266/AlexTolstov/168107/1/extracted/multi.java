import java.io.*;
import java.util.*;


public class Txxxx {
	
	Scanner in;
	PrintWriter out;
	
	static final String problem = "multi";
	static final int MAX_COUNT = 20000000;
	int [][]used = new int[11][MAX_COUNT / 32 + 1];
	int [][]ic = new int[11][MAX_COUNT / 32 + 1];
	
	int[] ar = new int[512];
	
	
	void make(){
		ar[1] = 2;
		ar[2] = 3;
		ar[3] = 3;
		ar[4] = 2;
		ar[5] = 2;
		ar[6] = 3;
		ar[7] = 3;
		ar[8] = 5;
		ar[9] = 5;
		ar[10] = 23;
		ar[11] = 23;
		ar[12] = 5;
		ar[13] = 5;
		ar[14] = 23;
		ar[15] = 23;
		ar[16] = 6;
		ar[17] = 6;
		ar[18] = 79;
		ar[19] = 79;
		ar[20] = 6;
		ar[21] = 6;
		ar[22] = 79;
		ar[23] = 79;
		ar[24] = 49;
		ar[25] = 49;
		ar[26] = 79;
		ar[27] = 79;
		ar[28] = 49;
		ar[29] = 49;
		ar[30] = 79;
		ar[31] = 79;
		ar[32] = 7;
		ar[33] = 7;
		ar[34] = 143;
		ar[35] = 143;
		ar[36] = 7;
		ar[37] = 7;
		ar[38] = 143;
		ar[39] = 143;
		ar[40] = 7;
		ar[41] = 7;
		ar[42] = 143;
		ar[43] = 143;
		ar[44] = 7;
		ar[45] = 7;
		ar[46] = 143;
		ar[47] = 143;
		ar[48] = 49;
		ar[49] = 49;
		ar[50] = 2207;
		ar[51] = 2207;
		ar[52] = 49;
		ar[53] = 49;
		ar[54] = 2207;
		ar[55] = 2207;
		ar[56] = 49;
		ar[57] = 49;
		ar[58] = 2207;
		ar[59] = 2207;
		ar[60] = 49;
		ar[61] = 49;
		ar[62] = 2207;
		ar[63] = 2207;
		ar[64] = 8;
		ar[65] = 8;
		ar[66] = 27;
		ar[67] = 27;
		ar[68] = 8;
		ar[69] = 8;
		ar[70] = 27;
		ar[71] = 27;
		ar[72] = 27;
		ar[73] = 27;
		ar[74] = 27;
		ar[75] = 27;
		ar[76] = 27;
		ar[77] = 27;
		ar[78] = 27;
		ar[79] = 27;
		ar[80] = 216;
		ar[81] = 216;
		ar[82] = 3879;
		ar[83] = 3879;
		ar[84] = 216;
		ar[85] = 216;
		ar[86] = 3879;
		ar[87] = 3879;
		ar[88] = 1975;
		ar[89] = 1975;
		ar[90] = 3879;
		ar[91] = 3879;
		ar[92] = 1975;
		ar[93] = 1975;
		ar[94] = 3879;
		ar[95] = 3879;
		ar[96] = 1001;
		ar[97] = 1001;
		ar[98] = 5719;
		ar[99] = 5719;
		ar[100] = 1001;
		ar[101] = 1001;
		ar[102] = 5719;
		ar[103] = 5719;
		ar[104] = 1001;
		ar[105] = 1001;
		ar[106] = 5719;
		ar[107] = 5719;
		ar[108] = 1001;
		ar[109] = 1001;
		ar[110] = 5719;
		ar[111] = 5719;
		ar[112] = 47089;
		ar[113] = 47089;
		ar[114] = 47089;
		ar[115] = 47089;
		ar[116] = 47089;
		ar[117] = 47089;
		ar[118] = 47089;
		ar[119] = 47089;
		ar[120] = 48769;
		ar[121] = 48769;
		ar[122] = 58775;
		ar[123] = 58775;
		ar[124] = 48769;
		ar[125] = 48769;
		ar[126] = 58775;
		ar[127] = 58775;
		ar[128] = 3;
		ar[129] = 3;
		ar[130] = 3;
		ar[131] = 3;
		ar[132] = 3;
		ar[133] = 3;
		ar[134] = 3;
		ar[135] = 3;
		ar[136] = 27;
		ar[137] = 27;
		ar[138] = 27;
		ar[139] = 27;
		ar[140] = 27;
		ar[141] = 27;
		ar[142] = 27;
		ar[143] = 27;
		ar[144] = 415;
		ar[145] = 415;
		ar[146] = 707;
		ar[147] = 707;
		ar[148] = 415;
		ar[149] = 415;
		ar[150] = 707;
		ar[151] = 707;
		ar[152] = 415;
		ar[153] = 415;
		ar[154] = 1695;
		ar[155] = 1695;
		ar[156] = 415;
		ar[157] = 415;
		ar[158] = 1695;
		ar[159] = 1695;
		ar[160] = 125;
		ar[161] = 125;
		ar[162] = 143;
		ar[163] = 143;
		ar[164] = 125;
		ar[165] = 125;
		ar[166] = 143;
		ar[167] = 143;
		ar[168] = 125;
		ar[169] = 125;
		ar[170] = 143;
		ar[171] = 143;
		ar[172] = 125;
		ar[173] = 125;
		ar[174] = 143;
		ar[175] = 143;
		ar[176] = 2753;
		ar[177] = 2753;
		ar[178] = 37131;
		ar[179] = 37131;
		ar[180] = 2753;
		ar[181] = 2753;
		ar[182] = 37131;
		ar[183] = 37131;
		ar[184] = 37131;
		ar[185] = 37131;
		ar[186] = 37131;
		ar[187] = 37131;
		ar[188] = 37131;
		ar[189] = 37131;
		ar[190] = 37131;
		ar[191] = 37131;
		ar[192] = 27;
		ar[193] = 27;
		ar[194] = 27;
		ar[195] = 27;
		ar[196] = 27;
		ar[197] = 27;
		ar[198] = 27;
		ar[199] = 27;
		ar[200] = 27;
		ar[201] = 27;
		ar[202] = 27;
		ar[203] = 27;
		ar[204] = 27;
		ar[205] = 27;
		ar[206] = 27;
		ar[207] = 27;
		ar[208] = 4977;
		ar[209] = 4977;
		ar[210] = 10089;
		ar[211] = 10089;
		ar[212] = 4977;
		ar[213] = 4977;
		ar[214] = 10089;
		ar[215] = 10089;
		ar[216] = 4977;
		ar[217] = 4977;
		ar[218] = 23117;
		ar[219] = 23117;
		ar[220] = 4977;
		ar[221] = 4977;
		ar[222] = 23117;
		ar[223] = 23117;
		ar[224] = 6393;
		ar[225] = 6393;
		ar[226] = 35785;
		ar[227] = 35785;
		ar[228] = 6393;
		ar[229] = 6393;
		ar[230] = 35785;
		ar[231] = 35785;
		ar[232] = 6393;
		ar[233] = 6393;
		ar[234] = 128821;
		ar[235] = 128821;
		ar[236] = 6393;
		ar[237] = 6393;
		ar[238] = 128821;
		ar[239] = 128821;
		ar[240] = 569669;
		ar[241] = 569669;
		ar[242] = 569669;
		ar[243] = 569669;
		ar[244] = 569669;
		ar[245] = 569669;
		ar[246] = 569669;
		ar[247] = 569669;
		ar[248] = 569669;
		ar[249] = 569669;
		ar[250] = 569669;
		ar[251] = 569669;
		ar[252] = 569669;
		ar[253] = 569669;
		ar[254] = 569669;
		ar[255] = 569669;
		ar[256] = 7;
		ar[257] = 7;
		ar[258] = 13;
		ar[259] = 13;
		ar[260] = 7;
		ar[261] = 7;
		ar[262] = 13;
		ar[263] = 13;
		ar[264] = 7;
		ar[265] = 7;
		ar[266] = 23;
		ar[267] = 23;
		ar[268] = 7;
		ar[269] = 7;
		ar[270] = 23;
		ar[271] = 23;
		ar[272] = 44;
		ar[273] = 44;
		ar[274] = 79;
		ar[275] = 79;
		ar[276] = 44;
		ar[277] = 44;
		ar[278] = 79;
		ar[279] = 79;
		ar[280] = 49;
		ar[281] = 49;
		ar[282] = 79;
		ar[283] = 79;
		ar[284] = 49;
		ar[285] = 49;
		ar[286] = 79;
		ar[287] = 79;
		ar[288] = 7;
		ar[289] = 7;
		ar[290] = 167;
		ar[291] = 167;
		ar[292] = 7;
		ar[293] = 7;
		ar[294] = 167;
		ar[295] = 167;
		ar[296] = 7;
		ar[297] = 7;
		ar[298] = 7895;
		ar[299] = 7895;
		ar[300] = 7;
		ar[301] = 7;
		ar[302] = 7895;
		ar[303] = 7895;
		ar[304] = 49;
		ar[305] = 49;
		ar[306] = 6307;
		ar[307] = 6307;
		ar[308] = 49;
		ar[309] = 49;
		ar[310] = 6307;
		ar[311] = 6307;
		ar[312] = 49;
		ar[313] = 49;
		ar[314] = 7895;
		ar[315] = 7895;
		ar[316] = 49;
		ar[317] = 49;
		ar[318] = 7895;
		ar[319] = 7895;
		ar[320] = 97;
		ar[321] = 97;
		ar[322] = 219;
		ar[323] = 219;
		ar[324] = 97;
		ar[325] = 97;
		ar[326] = 219;
		ar[327] = 219;
		ar[328] = 219;
		ar[329] = 219;
		ar[330] = 219;
		ar[331] = 219;
		ar[332] = 219;
		ar[333] = 219;
		ar[334] = 219;
		ar[335] = 219;
		ar[336] = 608;
		ar[337] = 608;
		ar[338] = 3879;
		ar[339] = 3879;
		ar[340] = 608;
		ar[341] = 608;
		ar[342] = 3879;
		ar[343] = 3879;
		ar[344] = 3879;
		ar[345] = 3879;
		ar[346] = 3879;
		ar[347] = 3879;
		ar[348] = 3879;
		ar[349] = 3879;
		ar[350] = 3879;
		ar[351] = 3879;
		ar[352] = 34527;
		ar[353] = 34527;
		ar[354] = 48041;
		ar[355] = 48041;
		ar[356] = 34527;
		ar[357] = 34527;
		ar[358] = 48041;
		ar[359] = 48041;
		ar[360] = 34527;
		ar[361] = 34527;
		ar[362] = 120407;
		ar[363] = 120407;
		ar[364] = 34527;
		ar[365] = 34527;
		ar[366] = 120407;
		ar[367] = 120407;
		ar[368] = 245035;
		ar[369] = 245035;
		ar[370] = 697563;
		ar[371] = 697563;
		ar[372] = 245035;
		ar[373] = 245035;
		ar[374] = 697563;
		ar[375] = 697563;
		ar[376] = 245035;
		ar[377] = 245035;
		ar[378] = 2688153;
		ar[379] = 2688153;
		ar[380] = 245035;
		ar[381] = 245035;
		ar[382] = 2688153;
		ar[383] = 2688153;
		ar[384] = 91;
		ar[385] = 91;
		ar[386] = 91;
		ar[387] = 91;
		ar[388] = 91;
		ar[389] = 91;
		ar[390] = 91;
		ar[391] = 91;
		ar[392] = 91;
		ar[393] = 91;
		ar[394] = 91;
		ar[395] = 91;
		ar[396] = 91;
		ar[397] = 91;
		ar[398] = 91;
		ar[399] = 91;
		ar[400] = 1033;
		ar[401] = 1033;
		ar[402] = 6073;
		ar[403] = 6073;
		ar[404] = 1033;
		ar[405] = 1033;
		ar[406] = 6073;
		ar[407] = 6073;
		ar[408] = 4577;
		ar[409] = 4577;
		ar[410] = 6073;
		ar[411] = 6073;
		ar[412] = 4577;
		ar[413] = 4577;
		ar[414] = 6073;
		ar[415] = 6073;
		ar[416] = 1337;
		ar[417] = 1337;
		ar[418] = 1337;
		ar[419] = 1337;
		ar[420] = 1337;
		ar[421] = 1337;
		ar[422] = 1337;
		ar[423] = 1337;
		ar[424] = 29913;
		ar[425] = 29913;
		ar[426] = 120149;
		ar[427] = 120149;
		ar[428] = 29913;
		ar[429] = 29913;
		ar[430] = 120149;
		ar[431] = 120149;
		ar[432] = 71735;
		ar[433] = 71735;
		ar[434] = 613479;
		ar[435] = 613479;
		ar[436] = 71735;
		ar[437] = 71735;
		ar[438] = 613479;
		ar[439] = 613479;
		ar[440] = 218301;
		ar[441] = 218301;
		ar[442] = 711725;
		ar[443] = 711725;
		ar[444] = 218301;
		ar[445] = 218301;
		ar[446] = 711725;
		ar[447] = 711725;
		ar[448] = 1177;
		ar[449] = 1177;
		ar[450] = 1177;
		ar[451] = 1177;
		ar[452] = 1177;
		ar[453] = 1177;
		ar[454] = 1177;
		ar[455] = 1177;
		ar[456] = 1177;
		ar[457] = 1177;
		ar[458] = 1177;
		ar[459] = 1177;
		ar[460] = 1177;
		ar[461] = 1177;
		ar[462] = 1177;
		ar[463] = 1177;
		ar[464] = 9867;
		ar[465] = 9867;
		ar[466] = 28099;
		ar[467] = 28099;
		ar[468] = 9867;
		ar[469] = 9867;
		ar[470] = 28099;
		ar[471] = 28099;
		ar[472] = 28099;
		ar[473] = 28099;
		ar[474] = 28099;
		ar[475] = 28099;
		ar[476] = 28099;
		ar[477] = 28099;
		ar[478] = 28099;
		ar[479] = 28099;
		ar[480] = 48041;
		ar[481] = 48041;
		ar[482] = 48041;
		ar[483] = 48041;
		ar[484] = 48041;
		ar[485] = 48041;
		ar[486] = 48041;
		ar[487] = 48041;
		ar[488] = 246297;
		ar[489] = 246297;
		ar[490] = 346719;
		ar[491] = 346719;
		ar[492] = 246297;
		ar[493] = 246297;
		ar[494] = 346719;
		ar[495] = 346719;
		ar[496] = 2662657;
		ar[497] = 2662657;
		ar[498] = 4817803;
		ar[499] = 4817803;
		ar[500] = 2662657;
		ar[501] = 2662657;
		ar[502] = 4817803;
		ar[503] = 4817803;
		ar[504] = 11814485;
		ar[505] = 11814485;
		ar[506] = 11814485;
		ar[507] = 11814485;
		ar[508] = 11814485;
		ar[509] = 11814485;
		ar[510] = 11814485;
		ar[511] = 11814485;
	}
	
	boolean get(int[][] a, int x, int base) {
		int seg = x / 32;
		int off = x%32;
		return (a[base][seg]&(1<<off)) != 0;
	}
	
	void set(int[][] a, int x, int base){
		int seg = x / 32;
		int off = x%32;
		a[base][seg]|=(1<<off);
	}
	
	boolean isCorrect(int x, int base){
		if (x == 1) {
			set(ic, x, base);
			return true;
		}
		if (get(used, x, base)){
			return get(ic, x, base);
		}
		int xStart = x;
		set(used, x, base);
		int sum = 0;
		while (x >= base) {
			int digit = x % base;
			sum += (digit)*(digit);
			x /= base;
		}
		sum += x * x;
		if (isCorrect(sum, base)){
			set(ic, xStart, base);
		}
		return get(ic, xStart, base);
	}
	
	void solveOne(){
		String s = in.nextLine();
		String v[] = s.split(" ");
		int[] base = new int[v.length];
		int idx = 0;
		for (int i=0; i<v.length; i++){
			base[i] = Integer.parseInt(v[i]);
			idx = idx | (1<<(base[i] - 2));
		}
		out.println(ar[idx]);
	}
	
	
	void gen(){
		for (int i=1; i<(1<<9); i++){
			out.print("ar["+i+"] = ");
			for (int val = 2; ; val++){
				boolean found = true;
				for (int p=9; p>=0; p--){
					if ((i & (1<<p)) != 0) {
						if (!isCorrect(val, p + 2)) {
							found = false;
							break;
						}
					}
				}
				if (found){
					out.println(val + ";");
					out.flush();
					break;
				}
			}
		}
	}
		
	void solve(){
		int t = in.nextInt();
		in.nextLine();
		for (int i=1; i<=t; i++){
			out.print("Case #"+i+": ");
			solveOne();			
		}
	}
	
	void run() {
		try {
			in = new Scanner(new FileReader("C:\\"+problem + ".in"));
			out = new PrintWriter("C:\\"+problem + ".out");
		} catch (IOException e) {
			throw new Error();
		}
	/*
		in = new Scanner(System.in);
		out = new PrintWriter(System.out);
		*/
		try {
			make();
			solve();					
		} finally {
			out.close();
		}
	}
	
	public static void main(String []args) {
		new Txxxx().run();
	}
}