#include<iostream>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<deque>
#include<string>
#include<cctype>
#include<cmath>
#include<sstream>
#include<numeric>
#include<complex>
#include<queue>
#include<ext/hash_map>
using namespace std;
using namespace __gnu_cxx;

//#define Big long long
//
//struct hashItem{
//	int operator()(const long long& n)const{
//		return n%2000000037;
//	}
//};
//struct eqItem{
//	bool operator()(const  long long& it1, const  long long& it2)const{
//		return it1 == it2;
//	}
//};
//
//string get(int b1, int b2, string n){
//	Big d = 0;
//	for(int i = n.size()-1 ; i >= 0 ; i--){
//		int g = (n[i] >= '0' && n[i] <= '9') ? n[i]-'0' : n[i]-'A'+10;
//		d += g*(::pow(b1, n.size()-i-1)+1e-9);
//
//		if(g >= b1)
//			return "INVALID";
//	}
//
//	if(d == 0)
//		return "0";
//
//	string str = "";
//	while(d > 0){
//		int r = d%b2;
//		if(r < 10)
//			str += '0'+r;
//		else
//			str += 'A'+(r-10);
//		d /= b2;
//	}
//
//	reverse(str.begin(), str.end());
//	return str;
//}
//
//#define NUM_TYPE long long
//struct Num{NUM_TYPE nVal;string sVal;Num(string str){sVal = str;istringstream stream(sVal);stream >> nVal;}Num(NUM_TYPE n){nVal = n;ostringstream stream(sVal);stream << fixed << n;sVal = stream.str();}};
//
//int tob(int x, int b){
//	Num n(x);
//	string s = get(10, b, n.sVal);
//	Num nn(s);
//	return nn.nVal;
//}
//
//vector<int> v;
//
//hash_map<Big, bool, hashItem, eqItem> table[100];
//
//bool check(int x, int b){
//
//	if(x == 1)
//		return true;
//
//	if(table[b].find(x) != table[b].end())
//		return table[b][x];
//
//	table[b][x] = 0;
//
//	int y = x, xx = 0;
//	while(y){
//		int d = y%10;
//		y /= 10;
//		xx += d*d;
//	}
//	int a = tob(xx, b);
//
//	return table[b][x] = check(a, b);
//}
//
//int calc(vector<int>& v){
//	for(int x = 2 ; ; x++){
//
//		bool ok = true;
//		for(int i = 0 ; i < v.size() ; i++){
//			int xx = tob(x, v[i]);
//			if(!check(xx, v[i])){
//				ok = false;
//				break;
//			}
//		}
//		if(ok)
//			return x;
//	}
//}

int pre[512] = {0, 2,3,3,2,2,3,3,5,5,23,23,5,5,23,23,6,6,79,79,6,6,79,79,49,49,79,79,49,49,79,79,7,7,143,143,7,7,143,143,7,7,143,143,7,7,143,143,49,49,2207,2207,49,49,2207,2207,49,49,2207,2207,49,49,2207,2207,8,8,27,27,8,8,27,27,27,27,27,27,27,27,27,27,216,216,3879,3879,216,216,3879,3879,1975,1975,3879,3879,1975,1975,3879,3879,1001,1001,5719,5719,1001,1001,5719,5719,1001,1001,5719,5719,1001,1001,5719,5719,47089,47089,47089,47089,47089,47089,47089,47089,48769,48769,58775,58775,48769,48769,58775,58775,3,3,3,3,3,3,3,3,27,27,27,27,27,27,27,27,415,415,707,707,415,415,707,707,415,415,1695,1695,415,415,1695,1695,125,125,143,143,125,125,143,143,125,125,143,143,125,125,143,143,2753,2753,37131,37131,2753,2753,37131,37131,37131,37131,37131,37131,37131,37131,37131,37131,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,4977,4977,10089,10089,4977,4977,10089,10089,4977,4977,23117,23117,4977,4977,23117,23117,6393,6393,35785,35785,6393,6393,35785,35785,6393,6393,128821,128821,6393,6393,128821,128821,569669,569669,705361,705361,569669,569669,705361,705361,569669,569669,705361,705361,569669,569669,705361,705361,7,7,13,13,7,7,13,13,7,7,23,23,7,7,23,23,44,44,79,79,44,44,79,79,49,49,79,79,49,49,79,79,7,7,167,167,7,7,167,167,7,7,7895,7895,7,7,7895,7895,49,49,6307,6307,49,49,6307,6307,49,49,7895,7895,49,49,7895,7895,97,97,219,219,97,97,219,219,219,219,219,219,219,219,219,219,608,608,3879,3879,608,608,3879,3879,3879,3879,3879,3879,3879,3879,3879,3879,34527,34527,48041,48041,34527,34527,48041,48041,34527,34527,120407,120407,34527,34527,120407,120407,245035,245035,285357,285357,245035,245035,285357,285357,245035,245035,5649221,5649221,245035,245035,5649221,5649221,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,1033,1033,6073,6073,1033,1033,6073,6073,4577,4577,6073,6073,4577,4577,6073,6073,1337,1337,1337,1337,1337,1337,1337,1337,29913,29913,120149,120149,29913,29913,120149,120149,71735,71735,711725,711725,71735,71735,711725,711725,218301,218301,711725,711725,218301,218301,711725,711725,1177,1177,1177,1177,1177,1177,1177,1177,1177,1177,1177,1177,1177,1177,1177,1177,9867,9867,28099,28099,9867,9867,28099,28099,28099,28099,28099,28099,28099,28099,28099,28099,48041,48041,48041,48041,48041,48041,48041,48041,246297,246297,566879,566879,246297,246297,566879,566879,2662657,2662657,4817803,4817803,2662657,2662657,4817803,4817803,8691149,8691149,8691149,8691149,8691149,8691149,8691149,8691149};

int main(){

//	freopen("pre.txt", "wt", stdout);
//
//	cout << "{";
//	for(int i = 1 ; i < (1<<9) ; i++){
//		if(i > 1)cout << ",";
//		vector<int> v;
//		for(int j = 0 ; j < 9 ; j++)
//			if((i>>j)&1)
//				v.push_back(j+2);
//		cout << calc(v) << flush;
//		cerr << i << endl;
//	}
//	cout << "}";
//	return 0;

	//freopen("1.in", "rt", stdin);
	//freopen("1.out", "wt", stdout);
	//freopen("A-small-attempt0.in", "rt", stdin);
	//freopen("A-small-attempt0.out", "wt", stdout);
	freopen("A-large.in", "rt", stdin);
	freopen("A-large.out", "wt", stdout);

	int tt; scanf("%d ", &tt);
	for(int t = 0 ; t < tt ; t++){

		int mask = 0;
		string line; getline(cin, line);
		stringstream st(line);
		while(true){
			int x; if(!(st>>x))break;
			mask |= (1<<(x-2));
		}
		cout << "Case #" << t+1 << ": " << pre[mask] << endl;
	}

	return 0;
}
